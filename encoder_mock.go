package crypt

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// EncoderMock implements Encoder
type EncoderMock struct {
	t minimock.Tester

	funcDecrypt          func(encrypted []byte) (ba1 []byte, err error)
	inspectFuncDecrypt   func(encrypted []byte)
	afterDecryptCounter  uint64
	beforeDecryptCounter uint64
	DecryptMock          mEncoderMockDecrypt

	funcEncrypt          func(plain []byte) (ba1 []byte)
	inspectFuncEncrypt   func(plain []byte)
	afterEncryptCounter  uint64
	beforeEncryptCounter uint64
	EncryptMock          mEncoderMockEncrypt
}

// NewEncoderMock returns a mock for Encoder
func NewEncoderMock(t minimock.Tester) *EncoderMock {
	m := &EncoderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DecryptMock = mEncoderMockDecrypt{mock: m}
	m.DecryptMock.callArgs = []*EncoderMockDecryptParams{}

	m.EncryptMock = mEncoderMockEncrypt{mock: m}
	m.EncryptMock.callArgs = []*EncoderMockEncryptParams{}

	return m
}

type mEncoderMockDecrypt struct {
	mock               *EncoderMock
	defaultExpectation *EncoderMockDecryptExpectation
	expectations       []*EncoderMockDecryptExpectation

	callArgs []*EncoderMockDecryptParams
	mutex    sync.RWMutex
}

// EncoderMockDecryptExpectation specifies expectation struct of the Encoder.Decrypt
type EncoderMockDecryptExpectation struct {
	mock    *EncoderMock
	params  *EncoderMockDecryptParams
	results *EncoderMockDecryptResults
	Counter uint64
}

// EncoderMockDecryptParams contains parameters of the Encoder.Decrypt
type EncoderMockDecryptParams struct {
	encrypted []byte
}

// EncoderMockDecryptResults contains results of the Encoder.Decrypt
type EncoderMockDecryptResults struct {
	ba1 []byte
	err error
}

// Expect sets up expected params for Encoder.Decrypt
func (mmDecrypt *mEncoderMockDecrypt) Expect(encrypted []byte) *mEncoderMockDecrypt {
	if mmDecrypt.mock.funcDecrypt != nil {
		mmDecrypt.mock.t.Fatalf("EncoderMock.Decrypt mock is already set by Set")
	}

	if mmDecrypt.defaultExpectation == nil {
		mmDecrypt.defaultExpectation = &EncoderMockDecryptExpectation{}
	}

	mmDecrypt.defaultExpectation.params = &EncoderMockDecryptParams{encrypted}
	for _, e := range mmDecrypt.expectations {
		if minimock.Equal(e.params, mmDecrypt.defaultExpectation.params) {
			mmDecrypt.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDecrypt.defaultExpectation.params)
		}
	}

	return mmDecrypt
}

// Inspect accepts an inspector function that has same arguments as the Encoder.Decrypt
func (mmDecrypt *mEncoderMockDecrypt) Inspect(f func(encrypted []byte)) *mEncoderMockDecrypt {
	if mmDecrypt.mock.inspectFuncDecrypt != nil {
		mmDecrypt.mock.t.Fatalf("Inspect function is already set for EncoderMock.Decrypt")
	}

	mmDecrypt.mock.inspectFuncDecrypt = f

	return mmDecrypt
}

// Return sets up results that will be returned by Encoder.Decrypt
func (mmDecrypt *mEncoderMockDecrypt) Return(ba1 []byte, err error) *EncoderMock {
	if mmDecrypt.mock.funcDecrypt != nil {
		mmDecrypt.mock.t.Fatalf("EncoderMock.Decrypt mock is already set by Set")
	}

	if mmDecrypt.defaultExpectation == nil {
		mmDecrypt.defaultExpectation = &EncoderMockDecryptExpectation{mock: mmDecrypt.mock}
	}
	mmDecrypt.defaultExpectation.results = &EncoderMockDecryptResults{ba1, err}
	return mmDecrypt.mock
}

//Set uses given function f to mock the Encoder.Decrypt method
func (mmDecrypt *mEncoderMockDecrypt) Set(f func(encrypted []byte) (ba1 []byte, err error)) *EncoderMock {
	if mmDecrypt.defaultExpectation != nil {
		mmDecrypt.mock.t.Fatalf("Default expectation is already set for the Encoder.Decrypt method")
	}

	if len(mmDecrypt.expectations) > 0 {
		mmDecrypt.mock.t.Fatalf("Some expectations are already set for the Encoder.Decrypt method")
	}

	mmDecrypt.mock.funcDecrypt = f
	return mmDecrypt.mock
}

// When sets expectation for the Encoder.Decrypt which will trigger the result defined by the following
// Then helper
func (mmDecrypt *mEncoderMockDecrypt) When(encrypted []byte) *EncoderMockDecryptExpectation {
	if mmDecrypt.mock.funcDecrypt != nil {
		mmDecrypt.mock.t.Fatalf("EncoderMock.Decrypt mock is already set by Set")
	}

	expectation := &EncoderMockDecryptExpectation{
		mock:   mmDecrypt.mock,
		params: &EncoderMockDecryptParams{encrypted},
	}
	mmDecrypt.expectations = append(mmDecrypt.expectations, expectation)
	return expectation
}

// Then sets up Encoder.Decrypt return parameters for the expectation previously defined by the When method
func (e *EncoderMockDecryptExpectation) Then(ba1 []byte, err error) *EncoderMock {
	e.results = &EncoderMockDecryptResults{ba1, err}
	return e.mock
}

// Decrypt implements Encoder
func (mmDecrypt *EncoderMock) Decrypt(encrypted []byte) (ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmDecrypt.beforeDecryptCounter, 1)
	defer mm_atomic.AddUint64(&mmDecrypt.afterDecryptCounter, 1)

	if mmDecrypt.inspectFuncDecrypt != nil {
		mmDecrypt.inspectFuncDecrypt(encrypted)
	}

	mm_params := &EncoderMockDecryptParams{encrypted}

	// Record call args
	mmDecrypt.DecryptMock.mutex.Lock()
	mmDecrypt.DecryptMock.callArgs = append(mmDecrypt.DecryptMock.callArgs, mm_params)
	mmDecrypt.DecryptMock.mutex.Unlock()

	for _, e := range mmDecrypt.DecryptMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1, e.results.err
		}
	}

	if mmDecrypt.DecryptMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDecrypt.DecryptMock.defaultExpectation.Counter, 1)
		mm_want := mmDecrypt.DecryptMock.defaultExpectation.params
		mm_got := EncoderMockDecryptParams{encrypted}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDecrypt.t.Errorf("EncoderMock.Decrypt got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDecrypt.DecryptMock.defaultExpectation.results
		if mm_results == nil {
			mmDecrypt.t.Fatal("No results are set for the EncoderMock.Decrypt")
		}
		return (*mm_results).ba1, (*mm_results).err
	}
	if mmDecrypt.funcDecrypt != nil {
		return mmDecrypt.funcDecrypt(encrypted)
	}
	mmDecrypt.t.Fatalf("Unexpected call to EncoderMock.Decrypt. %v", encrypted)
	return
}

// DecryptAfterCounter returns a count of finished EncoderMock.Decrypt invocations
func (mmDecrypt *EncoderMock) DecryptAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDecrypt.afterDecryptCounter)
}

// DecryptBeforeCounter returns a count of EncoderMock.Decrypt invocations
func (mmDecrypt *EncoderMock) DecryptBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDecrypt.beforeDecryptCounter)
}

// Calls returns a list of arguments used in each call to EncoderMock.Decrypt.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDecrypt *mEncoderMockDecrypt) Calls() []*EncoderMockDecryptParams {
	mmDecrypt.mutex.RLock()

	argCopy := make([]*EncoderMockDecryptParams, len(mmDecrypt.callArgs))
	copy(argCopy, mmDecrypt.callArgs)

	mmDecrypt.mutex.RUnlock()

	return argCopy
}

// MinimockDecryptDone returns true if the count of the Decrypt invocations corresponds
// the number of defined expectations
func (m *EncoderMock) MinimockDecryptDone() bool {
	for _, e := range m.DecryptMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DecryptMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDecryptCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDecrypt != nil && mm_atomic.LoadUint64(&m.afterDecryptCounter) < 1 {
		return false
	}
	return true
}

// MinimockDecryptInspect logs each unmet expectation
func (m *EncoderMock) MinimockDecryptInspect() {
	for _, e := range m.DecryptMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EncoderMock.Decrypt with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DecryptMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDecryptCounter) < 1 {
		if m.DecryptMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to EncoderMock.Decrypt")
		} else {
			m.t.Errorf("Expected call to EncoderMock.Decrypt with params: %#v", *m.DecryptMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDecrypt != nil && mm_atomic.LoadUint64(&m.afterDecryptCounter) < 1 {
		m.t.Error("Expected call to EncoderMock.Decrypt")
	}
}

type mEncoderMockEncrypt struct {
	mock               *EncoderMock
	defaultExpectation *EncoderMockEncryptExpectation
	expectations       []*EncoderMockEncryptExpectation

	callArgs []*EncoderMockEncryptParams
	mutex    sync.RWMutex
}

// EncoderMockEncryptExpectation specifies expectation struct of the Encoder.Encrypt
type EncoderMockEncryptExpectation struct {
	mock    *EncoderMock
	params  *EncoderMockEncryptParams
	results *EncoderMockEncryptResults
	Counter uint64
}

// EncoderMockEncryptParams contains parameters of the Encoder.Encrypt
type EncoderMockEncryptParams struct {
	plain []byte
}

// EncoderMockEncryptResults contains results of the Encoder.Encrypt
type EncoderMockEncryptResults struct {
	ba1 []byte
}

// Expect sets up expected params for Encoder.Encrypt
func (mmEncrypt *mEncoderMockEncrypt) Expect(plain []byte) *mEncoderMockEncrypt {
	if mmEncrypt.mock.funcEncrypt != nil {
		mmEncrypt.mock.t.Fatalf("EncoderMock.Encrypt mock is already set by Set")
	}

	if mmEncrypt.defaultExpectation == nil {
		mmEncrypt.defaultExpectation = &EncoderMockEncryptExpectation{}
	}

	mmEncrypt.defaultExpectation.params = &EncoderMockEncryptParams{plain}
	for _, e := range mmEncrypt.expectations {
		if minimock.Equal(e.params, mmEncrypt.defaultExpectation.params) {
			mmEncrypt.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmEncrypt.defaultExpectation.params)
		}
	}

	return mmEncrypt
}

// Inspect accepts an inspector function that has same arguments as the Encoder.Encrypt
func (mmEncrypt *mEncoderMockEncrypt) Inspect(f func(plain []byte)) *mEncoderMockEncrypt {
	if mmEncrypt.mock.inspectFuncEncrypt != nil {
		mmEncrypt.mock.t.Fatalf("Inspect function is already set for EncoderMock.Encrypt")
	}

	mmEncrypt.mock.inspectFuncEncrypt = f

	return mmEncrypt
}

// Return sets up results that will be returned by Encoder.Encrypt
func (mmEncrypt *mEncoderMockEncrypt) Return(ba1 []byte) *EncoderMock {
	if mmEncrypt.mock.funcEncrypt != nil {
		mmEncrypt.mock.t.Fatalf("EncoderMock.Encrypt mock is already set by Set")
	}

	if mmEncrypt.defaultExpectation == nil {
		mmEncrypt.defaultExpectation = &EncoderMockEncryptExpectation{mock: mmEncrypt.mock}
	}
	mmEncrypt.defaultExpectation.results = &EncoderMockEncryptResults{ba1}
	return mmEncrypt.mock
}

//Set uses given function f to mock the Encoder.Encrypt method
func (mmEncrypt *mEncoderMockEncrypt) Set(f func(plain []byte) (ba1 []byte)) *EncoderMock {
	if mmEncrypt.defaultExpectation != nil {
		mmEncrypt.mock.t.Fatalf("Default expectation is already set for the Encoder.Encrypt method")
	}

	if len(mmEncrypt.expectations) > 0 {
		mmEncrypt.mock.t.Fatalf("Some expectations are already set for the Encoder.Encrypt method")
	}

	mmEncrypt.mock.funcEncrypt = f
	return mmEncrypt.mock
}

// When sets expectation for the Encoder.Encrypt which will trigger the result defined by the following
// Then helper
func (mmEncrypt *mEncoderMockEncrypt) When(plain []byte) *EncoderMockEncryptExpectation {
	if mmEncrypt.mock.funcEncrypt != nil {
		mmEncrypt.mock.t.Fatalf("EncoderMock.Encrypt mock is already set by Set")
	}

	expectation := &EncoderMockEncryptExpectation{
		mock:   mmEncrypt.mock,
		params: &EncoderMockEncryptParams{plain},
	}
	mmEncrypt.expectations = append(mmEncrypt.expectations, expectation)
	return expectation
}

// Then sets up Encoder.Encrypt return parameters for the expectation previously defined by the When method
func (e *EncoderMockEncryptExpectation) Then(ba1 []byte) *EncoderMock {
	e.results = &EncoderMockEncryptResults{ba1}
	return e.mock
}

// Encrypt implements Encoder
func (mmEncrypt *EncoderMock) Encrypt(plain []byte) (ba1 []byte) {
	mm_atomic.AddUint64(&mmEncrypt.beforeEncryptCounter, 1)
	defer mm_atomic.AddUint64(&mmEncrypt.afterEncryptCounter, 1)

	if mmEncrypt.inspectFuncEncrypt != nil {
		mmEncrypt.inspectFuncEncrypt(plain)
	}

	mm_params := &EncoderMockEncryptParams{plain}

	// Record call args
	mmEncrypt.EncryptMock.mutex.Lock()
	mmEncrypt.EncryptMock.callArgs = append(mmEncrypt.EncryptMock.callArgs, mm_params)
	mmEncrypt.EncryptMock.mutex.Unlock()

	for _, e := range mmEncrypt.EncryptMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1
		}
	}

	if mmEncrypt.EncryptMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmEncrypt.EncryptMock.defaultExpectation.Counter, 1)
		mm_want := mmEncrypt.EncryptMock.defaultExpectation.params
		mm_got := EncoderMockEncryptParams{plain}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmEncrypt.t.Errorf("EncoderMock.Encrypt got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmEncrypt.EncryptMock.defaultExpectation.results
		if mm_results == nil {
			mmEncrypt.t.Fatal("No results are set for the EncoderMock.Encrypt")
		}
		return (*mm_results).ba1
	}
	if mmEncrypt.funcEncrypt != nil {
		return mmEncrypt.funcEncrypt(plain)
	}
	mmEncrypt.t.Fatalf("Unexpected call to EncoderMock.Encrypt. %v", plain)
	return
}

// EncryptAfterCounter returns a count of finished EncoderMock.Encrypt invocations
func (mmEncrypt *EncoderMock) EncryptAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEncrypt.afterEncryptCounter)
}

// EncryptBeforeCounter returns a count of EncoderMock.Encrypt invocations
func (mmEncrypt *EncoderMock) EncryptBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEncrypt.beforeEncryptCounter)
}

// Calls returns a list of arguments used in each call to EncoderMock.Encrypt.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmEncrypt *mEncoderMockEncrypt) Calls() []*EncoderMockEncryptParams {
	mmEncrypt.mutex.RLock()

	argCopy := make([]*EncoderMockEncryptParams, len(mmEncrypt.callArgs))
	copy(argCopy, mmEncrypt.callArgs)

	mmEncrypt.mutex.RUnlock()

	return argCopy
}

// MinimockEncryptDone returns true if the count of the Encrypt invocations corresponds
// the number of defined expectations
func (m *EncoderMock) MinimockEncryptDone() bool {
	for _, e := range m.EncryptMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.EncryptMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterEncryptCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEncrypt != nil && mm_atomic.LoadUint64(&m.afterEncryptCounter) < 1 {
		return false
	}
	return true
}

// MinimockEncryptInspect logs each unmet expectation
func (m *EncoderMock) MinimockEncryptInspect() {
	for _, e := range m.EncryptMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EncoderMock.Encrypt with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.EncryptMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterEncryptCounter) < 1 {
		if m.EncryptMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to EncoderMock.Encrypt")
		} else {
			m.t.Errorf("Expected call to EncoderMock.Encrypt with params: %#v", *m.EncryptMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEncrypt != nil && mm_atomic.LoadUint64(&m.afterEncryptCounter) < 1 {
		m.t.Error("Expected call to EncoderMock.Encrypt")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *EncoderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDecryptInspect()

		m.MinimockEncryptInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *EncoderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *EncoderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDecryptDone() &&
		m.MinimockEncryptDone()
}
