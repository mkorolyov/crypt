package crypt

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HasherMock implements Hasher
type HasherMock struct {
	t minimock.Tester

	funcHash          func(plain string, globalSalt []byte) (s1 string, err error)
	inspectFuncHash   func(plain string, globalSalt []byte)
	afterHashCounter  uint64
	beforeHashCounter uint64
	HashMock          mHasherMockHash

	funcVerify          func(hashed string, auditee string, globalSalt []byte) (b1 bool, err error)
	inspectFuncVerify   func(hashed string, auditee string, globalSalt []byte)
	afterVerifyCounter  uint64
	beforeVerifyCounter uint64
	VerifyMock          mHasherMockVerify
}

// NewHasherMock returns a mock for Hasher
func NewHasherMock(t minimock.Tester) *HasherMock {
	m := &HasherMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HashMock = mHasherMockHash{mock: m}
	m.HashMock.callArgs = []*HasherMockHashParams{}

	m.VerifyMock = mHasherMockVerify{mock: m}
	m.VerifyMock.callArgs = []*HasherMockVerifyParams{}

	return m
}

type mHasherMockHash struct {
	mock               *HasherMock
	defaultExpectation *HasherMockHashExpectation
	expectations       []*HasherMockHashExpectation

	callArgs []*HasherMockHashParams
	mutex    sync.RWMutex
}

// HasherMockHashExpectation specifies expectation struct of the Hasher.Hash
type HasherMockHashExpectation struct {
	mock    *HasherMock
	params  *HasherMockHashParams
	results *HasherMockHashResults
	Counter uint64
}

// HasherMockHashParams contains parameters of the Hasher.Hash
type HasherMockHashParams struct {
	plain      string
	globalSalt []byte
}

// HasherMockHashResults contains results of the Hasher.Hash
type HasherMockHashResults struct {
	s1  string
	err error
}

// Expect sets up expected params for Hasher.Hash
func (mmHash *mHasherMockHash) Expect(plain string, globalSalt []byte) *mHasherMockHash {
	if mmHash.mock.funcHash != nil {
		mmHash.mock.t.Fatalf("HasherMock.Hash mock is already set by Set")
	}

	if mmHash.defaultExpectation == nil {
		mmHash.defaultExpectation = &HasherMockHashExpectation{}
	}

	mmHash.defaultExpectation.params = &HasherMockHashParams{plain, globalSalt}
	for _, e := range mmHash.expectations {
		if minimock.Equal(e.params, mmHash.defaultExpectation.params) {
			mmHash.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHash.defaultExpectation.params)
		}
	}

	return mmHash
}

// Inspect accepts an inspector function that has same arguments as the Hasher.Hash
func (mmHash *mHasherMockHash) Inspect(f func(plain string, globalSalt []byte)) *mHasherMockHash {
	if mmHash.mock.inspectFuncHash != nil {
		mmHash.mock.t.Fatalf("Inspect function is already set for HasherMock.Hash")
	}

	mmHash.mock.inspectFuncHash = f

	return mmHash
}

// Return sets up results that will be returned by Hasher.Hash
func (mmHash *mHasherMockHash) Return(s1 string, err error) *HasherMock {
	if mmHash.mock.funcHash != nil {
		mmHash.mock.t.Fatalf("HasherMock.Hash mock is already set by Set")
	}

	if mmHash.defaultExpectation == nil {
		mmHash.defaultExpectation = &HasherMockHashExpectation{mock: mmHash.mock}
	}
	mmHash.defaultExpectation.results = &HasherMockHashResults{s1, err}
	return mmHash.mock
}

//Set uses given function f to mock the Hasher.Hash method
func (mmHash *mHasherMockHash) Set(f func(plain string, globalSalt []byte) (s1 string, err error)) *HasherMock {
	if mmHash.defaultExpectation != nil {
		mmHash.mock.t.Fatalf("Default expectation is already set for the Hasher.Hash method")
	}

	if len(mmHash.expectations) > 0 {
		mmHash.mock.t.Fatalf("Some expectations are already set for the Hasher.Hash method")
	}

	mmHash.mock.funcHash = f
	return mmHash.mock
}

// When sets expectation for the Hasher.Hash which will trigger the result defined by the following
// Then helper
func (mmHash *mHasherMockHash) When(plain string, globalSalt []byte) *HasherMockHashExpectation {
	if mmHash.mock.funcHash != nil {
		mmHash.mock.t.Fatalf("HasherMock.Hash mock is already set by Set")
	}

	expectation := &HasherMockHashExpectation{
		mock:   mmHash.mock,
		params: &HasherMockHashParams{plain, globalSalt},
	}
	mmHash.expectations = append(mmHash.expectations, expectation)
	return expectation
}

// Then sets up Hasher.Hash return parameters for the expectation previously defined by the When method
func (e *HasherMockHashExpectation) Then(s1 string, err error) *HasherMock {
	e.results = &HasherMockHashResults{s1, err}
	return e.mock
}

// Hash implements Hasher
func (mmHash *HasherMock) Hash(plain string, globalSalt []byte) (s1 string, err error) {
	mm_atomic.AddUint64(&mmHash.beforeHashCounter, 1)
	defer mm_atomic.AddUint64(&mmHash.afterHashCounter, 1)

	if mmHash.inspectFuncHash != nil {
		mmHash.inspectFuncHash(plain, globalSalt)
	}

	mm_params := &HasherMockHashParams{plain, globalSalt}

	// Record call args
	mmHash.HashMock.mutex.Lock()
	mmHash.HashMock.callArgs = append(mmHash.HashMock.callArgs, mm_params)
	mmHash.HashMock.mutex.Unlock()

	for _, e := range mmHash.HashMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmHash.HashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHash.HashMock.defaultExpectation.Counter, 1)
		mm_want := mmHash.HashMock.defaultExpectation.params
		mm_got := HasherMockHashParams{plain, globalSalt}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHash.t.Errorf("HasherMock.Hash got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHash.HashMock.defaultExpectation.results
		if mm_results == nil {
			mmHash.t.Fatal("No results are set for the HasherMock.Hash")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmHash.funcHash != nil {
		return mmHash.funcHash(plain, globalSalt)
	}
	mmHash.t.Fatalf("Unexpected call to HasherMock.Hash. %v %v", plain, globalSalt)
	return
}

// HashAfterCounter returns a count of finished HasherMock.Hash invocations
func (mmHash *HasherMock) HashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHash.afterHashCounter)
}

// HashBeforeCounter returns a count of HasherMock.Hash invocations
func (mmHash *HasherMock) HashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHash.beforeHashCounter)
}

// Calls returns a list of arguments used in each call to HasherMock.Hash.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHash *mHasherMockHash) Calls() []*HasherMockHashParams {
	mmHash.mutex.RLock()

	argCopy := make([]*HasherMockHashParams, len(mmHash.callArgs))
	copy(argCopy, mmHash.callArgs)

	mmHash.mutex.RUnlock()

	return argCopy
}

// MinimockHashDone returns true if the count of the Hash invocations corresponds
// the number of defined expectations
func (m *HasherMock) MinimockHashDone() bool {
	for _, e := range m.HashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHashCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHash != nil && mm_atomic.LoadUint64(&m.afterHashCounter) < 1 {
		return false
	}
	return true
}

// MinimockHashInspect logs each unmet expectation
func (m *HasherMock) MinimockHashInspect() {
	for _, e := range m.HashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HasherMock.Hash with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHashCounter) < 1 {
		if m.HashMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HasherMock.Hash")
		} else {
			m.t.Errorf("Expected call to HasherMock.Hash with params: %#v", *m.HashMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHash != nil && mm_atomic.LoadUint64(&m.afterHashCounter) < 1 {
		m.t.Error("Expected call to HasherMock.Hash")
	}
}

type mHasherMockVerify struct {
	mock               *HasherMock
	defaultExpectation *HasherMockVerifyExpectation
	expectations       []*HasherMockVerifyExpectation

	callArgs []*HasherMockVerifyParams
	mutex    sync.RWMutex
}

// HasherMockVerifyExpectation specifies expectation struct of the Hasher.Verify
type HasherMockVerifyExpectation struct {
	mock    *HasherMock
	params  *HasherMockVerifyParams
	results *HasherMockVerifyResults
	Counter uint64
}

// HasherMockVerifyParams contains parameters of the Hasher.Verify
type HasherMockVerifyParams struct {
	hashed     string
	auditee    string
	globalSalt []byte
}

// HasherMockVerifyResults contains results of the Hasher.Verify
type HasherMockVerifyResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for Hasher.Verify
func (mmVerify *mHasherMockVerify) Expect(hashed string, auditee string, globalSalt []byte) *mHasherMockVerify {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("HasherMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &HasherMockVerifyExpectation{}
	}

	mmVerify.defaultExpectation.params = &HasherMockVerifyParams{hashed, auditee, globalSalt}
	for _, e := range mmVerify.expectations {
		if minimock.Equal(e.params, mmVerify.defaultExpectation.params) {
			mmVerify.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerify.defaultExpectation.params)
		}
	}

	return mmVerify
}

// Inspect accepts an inspector function that has same arguments as the Hasher.Verify
func (mmVerify *mHasherMockVerify) Inspect(f func(hashed string, auditee string, globalSalt []byte)) *mHasherMockVerify {
	if mmVerify.mock.inspectFuncVerify != nil {
		mmVerify.mock.t.Fatalf("Inspect function is already set for HasherMock.Verify")
	}

	mmVerify.mock.inspectFuncVerify = f

	return mmVerify
}

// Return sets up results that will be returned by Hasher.Verify
func (mmVerify *mHasherMockVerify) Return(b1 bool, err error) *HasherMock {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("HasherMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &HasherMockVerifyExpectation{mock: mmVerify.mock}
	}
	mmVerify.defaultExpectation.results = &HasherMockVerifyResults{b1, err}
	return mmVerify.mock
}

//Set uses given function f to mock the Hasher.Verify method
func (mmVerify *mHasherMockVerify) Set(f func(hashed string, auditee string, globalSalt []byte) (b1 bool, err error)) *HasherMock {
	if mmVerify.defaultExpectation != nil {
		mmVerify.mock.t.Fatalf("Default expectation is already set for the Hasher.Verify method")
	}

	if len(mmVerify.expectations) > 0 {
		mmVerify.mock.t.Fatalf("Some expectations are already set for the Hasher.Verify method")
	}

	mmVerify.mock.funcVerify = f
	return mmVerify.mock
}

// When sets expectation for the Hasher.Verify which will trigger the result defined by the following
// Then helper
func (mmVerify *mHasherMockVerify) When(hashed string, auditee string, globalSalt []byte) *HasherMockVerifyExpectation {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("HasherMock.Verify mock is already set by Set")
	}

	expectation := &HasherMockVerifyExpectation{
		mock:   mmVerify.mock,
		params: &HasherMockVerifyParams{hashed, auditee, globalSalt},
	}
	mmVerify.expectations = append(mmVerify.expectations, expectation)
	return expectation
}

// Then sets up Hasher.Verify return parameters for the expectation previously defined by the When method
func (e *HasherMockVerifyExpectation) Then(b1 bool, err error) *HasherMock {
	e.results = &HasherMockVerifyResults{b1, err}
	return e.mock
}

// Verify implements Hasher
func (mmVerify *HasherMock) Verify(hashed string, auditee string, globalSalt []byte) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmVerify.beforeVerifyCounter, 1)
	defer mm_atomic.AddUint64(&mmVerify.afterVerifyCounter, 1)

	if mmVerify.inspectFuncVerify != nil {
		mmVerify.inspectFuncVerify(hashed, auditee, globalSalt)
	}

	mm_params := &HasherMockVerifyParams{hashed, auditee, globalSalt}

	// Record call args
	mmVerify.VerifyMock.mutex.Lock()
	mmVerify.VerifyMock.callArgs = append(mmVerify.VerifyMock.callArgs, mm_params)
	mmVerify.VerifyMock.mutex.Unlock()

	for _, e := range mmVerify.VerifyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmVerify.VerifyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerify.VerifyMock.defaultExpectation.Counter, 1)
		mm_want := mmVerify.VerifyMock.defaultExpectation.params
		mm_got := HasherMockVerifyParams{hashed, auditee, globalSalt}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerify.t.Errorf("HasherMock.Verify got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerify.VerifyMock.defaultExpectation.results
		if mm_results == nil {
			mmVerify.t.Fatal("No results are set for the HasherMock.Verify")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmVerify.funcVerify != nil {
		return mmVerify.funcVerify(hashed, auditee, globalSalt)
	}
	mmVerify.t.Fatalf("Unexpected call to HasherMock.Verify. %v %v %v", hashed, auditee, globalSalt)
	return
}

// VerifyAfterCounter returns a count of finished HasherMock.Verify invocations
func (mmVerify *HasherMock) VerifyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerify.afterVerifyCounter)
}

// VerifyBeforeCounter returns a count of HasherMock.Verify invocations
func (mmVerify *HasherMock) VerifyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerify.beforeVerifyCounter)
}

// Calls returns a list of arguments used in each call to HasherMock.Verify.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerify *mHasherMockVerify) Calls() []*HasherMockVerifyParams {
	mmVerify.mutex.RLock()

	argCopy := make([]*HasherMockVerifyParams, len(mmVerify.callArgs))
	copy(argCopy, mmVerify.callArgs)

	mmVerify.mutex.RUnlock()

	return argCopy
}

// MinimockVerifyDone returns true if the count of the Verify invocations corresponds
// the number of defined expectations
func (m *HasherMock) MinimockVerifyDone() bool {
	for _, e := range m.VerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerifyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerify != nil && mm_atomic.LoadUint64(&m.afterVerifyCounter) < 1 {
		return false
	}
	return true
}

// MinimockVerifyInspect logs each unmet expectation
func (m *HasherMock) MinimockVerifyInspect() {
	for _, e := range m.VerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HasherMock.Verify with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerifyCounter) < 1 {
		if m.VerifyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HasherMock.Verify")
		} else {
			m.t.Errorf("Expected call to HasherMock.Verify with params: %#v", *m.VerifyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerify != nil && mm_atomic.LoadUint64(&m.afterVerifyCounter) < 1 {
		m.t.Error("Expected call to HasherMock.Verify")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HasherMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockHashInspect()

		m.MinimockVerifyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HasherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HasherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHashDone() &&
		m.MinimockVerifyDone()
}
